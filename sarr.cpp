//Υλοποίηση 2) ταξινομημένος πίνακας
#include "sarr.h"

int sarr::binarySearch(word *b, char* s, int low, int high)
{
	if (high <= low)
		return (strcmp(s,b[low].w)>0) ? (low + 1) : low;

	int mid = (low + high) / 2;

	if (strcmp(s,b[mid].w)==0)
		return mid + 1;

	if (strcmp(s,b[mid].w)>0)
		return binarySearch(b, s, mid + 1, high);

	return binarySearch(b, s, low,	mid - 1);
}

int sarr::find(char* s) //αναζήτηση, δέχεται μία συμβολοσειρά για όρισμα
{
	int start=0; //αρχή του πίνακα που θα ψάξουμε
	int end=c-1; //"τέλος" του πίνακα
	int m;
	while (start<=end)
	{
		m=(start+end)/2; //παίρνουμε το μεσαίο στοιχείο
		if (strcmp(s,b[m].w)==0) //αν την βρει στο μεσαίο
		{													
			b[m].t++;	//αυξάνει τις επαναλήψεις της λέξης
			return -1; //επιστρέφει -1 όταν την βρίσκει
		}
		else if (strcmp(s,b[m].w)>0) //αν η λέξη είναι μεγαλύτερη από την μεσαία, τότε θα ψάξουμε από την μέση του πίνακα προς το τέλος
		{
			start=m+1;
		}
		else //αν είναι μικρότερη, θα ψάξουμε από την μέση προς την αρχή
		{
			end=m-1;
		}
	}
	
	return binarySearch(b,s,0,c-1);
};

void sarr::insert(char*s, int p) //εισαγωγή νέας λέξης
{
	if (c%50==0) //οι αυξήσεις που θα κάνουμε στον πίνακα θα είναι +50 θέσεις
	{
		word *temp; //δημιουργούμε δείκτη σε νέο πίνακα

		temp = new word[size+50]; //ορίζουμε μεγαλύτερο πίνακα
		memcpy(temp,b,size*sizeof(word)); //αντιγράφουμε τα δεδομένα

		delete [] b; //απελευθερώνουμε τον χώρο που έπιανε ο προηγούμενος πίνακας

		b = temp; //αντιγράφουμε την διεύθυνση του νέου πίνακα στον δείκτη μας
		size+=50; //αυξάνουμε το μέγεθος της size
	}
	
	for (int i=c-1; i>=p; i--) //ξεκινάμε το i από αυτήν την θέση
	{
		strcpy(b[i+1].w,b[i].w); //αντιγράφουμε μία προς μία τις λέξεις στην προηγούμενη θέση στον πίνακα, ουσιαστικα δεν "διαγράφουμε", αλλά κάνουμε overwrite
		b[i+1].t=b[i].t;
	}
	strcpy(b[p].w,s); //αντιγράφουμε συμβολοσειρά
	b[p].t++; //αυξάνουμε επαναλήψεις
	c++; //αυξάνουμε μετρητή
}